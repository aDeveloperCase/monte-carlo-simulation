{"version":3,"sources":["hooks/index.ts","services/monteCarloAPI/monteCarloAPI.ts","redux/reducers/forecast/forecastSlice.ts","components/monte-carlo-settings/MonteCarloSettings.tsx","components/monte-carlo-output/MonteCarloOutput.tsx","App.tsx","redux/index.ts","serviceWorker.ts","index.tsx"],"names":["useAppSelector","useSelector","getConfidenceIntervals","data","worker","Worker","postMessage","Promise","resolve","onmessage","event","getPercentile","computeConfidenceIntervalsAsync","createAsyncThunk","a","computePercentileAsync","forecastSlice","createSlice","name","initialState","confidenceIntervals","confidenceIntervalsStatus","percentile","percentileStatus","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","selectForecast","forecast","Field","Form","Label","Control","Help","Input","currDateString","Date","toISOString","substr","MonteCarloSettings","dispatch","useDispatch","ticketsPerDayInput","useRef","useState","totalRuns","setTotalRuns","ticketsTarget","setTicketsTarget","ticketsPerDay","setTicketsPerDay","startingDate","setStartingDate","days","setDays","Column","size","horizontal","Body","placeholder","type","onChange","e","parseInt","target","value","onFocus","select","length","domRef","onClick","current","focus","className","disabled","itemsTarget","throughputs","then","subtitle","map","tickets","index","filter","_index","removeTicketsPerDay","LoadingContainer","MonteCarloOutput","width","height","chartType","loader","toDateString","options","title","bar","groupWidth","legend","position","rootProps","timestamp","sum","App","store","configureStore","reducer","forecastReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a68d4960.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { RootState, AppDispatch } from '../redux';\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { ConfidenceIntervalsParams, PercentileData } from \"../../redux/reducers/forecast/forecastSlice\";\r\n\r\nexport function getConfidenceIntervals(data: ConfidenceIntervalsParams) {\r\n  const worker = new Worker('/monte-carlo-simulation/computeConfidenceIntervals.js');\r\n  worker.postMessage(data);\r\n\r\n  return new Promise<[string, number][]>((resolve) => {\r\n    worker.onmessage = (event) => {\r\n      resolve(event.data)\r\n    };\r\n  });\r\n}\r\n\r\nexport function getPercentile(data: [string, number][]) {\r\n  const worker = new Worker('/monte-carlo-simulation/computePercentile.js');\r\n  worker.postMessage(data);\r\n\r\n  return new Promise<PercentileData[]>((resolve) => {\r\n    worker.onmessage = (event) => {\r\n      resolve(event.data)\r\n    };\r\n  });\r\n}","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"../..\";\r\nimport { getConfidenceIntervals, getPercentile } from \"../../../services/monteCarloAPI/monteCarloAPI\";\r\n\r\nexport interface ConfidenceIntervalsParams {\r\n  totalRuns: number;\r\n  itemsTarget: number;\r\n  throughputs: number[];\r\n  startingDate: string;\r\n}\r\n\r\nexport interface PercentileData {\r\n  percentile: number;\r\n  timestamp: string;\r\n  sum: number;\r\n  totalRuns: number;\r\n}\r\n\r\nexport interface ForecastData {\r\n  confidenceIntervals: [string, number][];\r\n  confidenceIntervalsStatus: 'init' | 'idle' | 'loading' | 'failed';\r\n  percentileStatus: 'init' | 'idle' | 'loading' | 'failed';\r\n  percentile: PercentileData[];\r\n}\r\n\r\nconst initialState: ForecastData = {\r\n  confidenceIntervals: [],\r\n  confidenceIntervalsStatus: 'init',\r\n  percentile: [],\r\n  percentileStatus: 'init'\r\n};\r\n\r\nexport const computeConfidenceIntervalsAsync = createAsyncThunk(\r\n  'forecast/getConfidenceIntervals',\r\n  async (data: ConfidenceIntervalsParams) => {\r\n    return await getConfidenceIntervals(data);\r\n  }\r\n);\r\n\r\nexport const computePercentileAsync = createAsyncThunk(\r\n  'forecast/getPercentile',\r\n  async (data: [string, number][]) => {\r\n    return await getPercentile(data);\r\n  }\r\n);\r\n\r\nexport const forecastSlice = createSlice({\r\n  name: 'forecast',\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(computeConfidenceIntervalsAsync.pending, (state) => {\r\n        state.confidenceIntervalsStatus = 'loading';\r\n      })\r\n      .addCase(computeConfidenceIntervalsAsync.fulfilled, (state, action) => {\r\n        state.confidenceIntervalsStatus = 'idle';\r\n        state.confidenceIntervals = action.payload;\r\n      })\r\n      .addCase(computePercentileAsync.pending, (state) => {\r\n        state.percentileStatus = 'loading';\r\n      })\r\n      .addCase(computePercentileAsync.fulfilled, (state, action) => {\r\n        state.percentileStatus = 'idle';\r\n        state.percentile = action.payload;\r\n      });\r\n  }\r\n});\r\n\r\nexport const selectForecast = (state: RootState) => state.forecast;\r\n\r\nexport default forecastSlice.reducer;","import React, { useRef, useState } from 'react';\r\nimport { Form, Icon, Button, Columns, Heading } from 'react-bulma-components';\r\nimport { FaPlus, FaTimes } from 'react-icons/fa';\r\nimport { useAppDispatch } from '../../hooks';\r\nimport { useAppSelector } from '../../hooks';\r\nimport {\r\n  computeConfidenceIntervalsAsync, computePercentileAsync, ConfidenceIntervalsParams, selectForecast\r\n} from '../../redux/reducers/forecast/forecastSlice';\r\n\r\nconst { Field, Label, Control, Help, Input } = Form;\r\n\r\nconst currDate = new Date();\r\nconst currDateString = currDate.toISOString().substr(0,10);\r\n\r\nexport function MonteCarloSettings() {\r\n  const dispatch = useAppDispatch();\r\n  const forecast = useAppSelector(selectForecast);\r\n\r\n  const ticketsPerDayInput = useRef(null);\r\n\r\n  const [totalRuns, setTotalRuns] = useState(1_000_000);\r\n  const [ticketsTarget, setTicketsTarget] = useState(60)\r\n  const [ticketsPerDay, setTicketsPerDay] = useState(0);\r\n  const [startingDate, setStartingDate] = useState(currDateString);\r\n\r\n  const [days, setDays] = useState<number[]>([1, 2, 3, 1, 0, 2, 2, 3, 2, 3]);\r\n\r\n  const addTicketsPerDay = () => {\r\n    setDays((days) => [...days, ticketsPerDay]);\r\n    setTicketsPerDay(0);\r\n    // @ts-ignore\r\n    ticketsPerDayInput.current?.focus();\r\n  };\r\n\r\n  const removeTicketsPerDay = (index: number) => {\r\n    setDays((days) => days.filter((value, _index) => index !== _index));\r\n  }\r\n\r\n  const ticketsPerDayList = (tickets: number, index: number) => {\r\n    return (\r\n      <Columns key={index}>\r\n        <Columns.Column size={8}>Day {index + 1} - {tickets}</Columns.Column>\r\n        <Columns.Column size={4}>\r\n          <Button onClick={() => removeTicketsPerDay(index)}>\r\n            <Icon><FaTimes /></Icon>\r\n          </Button>\r\n        </Columns.Column>\r\n      </Columns>\r\n    )\r\n  }\r\n\r\n  const handleCompute = () => {\r\n    const params: ConfidenceIntervalsParams = {\r\n      totalRuns,\r\n      itemsTarget: ticketsTarget,\r\n      throughputs: days,\r\n      startingDate: startingDate\r\n    };\r\n    \r\n    dispatch(computeConfidenceIntervalsAsync(params))\r\n      .then((action) => dispatch(computePercentileAsync(action.payload as [string, number][])));\r\n  };\r\n\r\n  return (\r\n    <Columns>\r\n      <Columns.Column size={6}>\r\n        <Field horizontal>\r\n          <Field.Label>\r\n            <Label>\r\n              Total Runs\r\n            </Label>\r\n          </Field.Label>\r\n          <Field.Body>\r\n            <Field>\r\n              <Control>\r\n                <Input\r\n                  placeholder=\"Total Runs\"\r\n                  type=\"number\"\r\n                  onChange={e => setTotalRuns(parseInt(e.target.value) || 0)}\r\n                  onFocus={e => e.target.select()}\r\n                  value={totalRuns || ''}\r\n                />\r\n              </Control>\r\n              <Help></Help>\r\n            </Field>\r\n          </Field.Body>\r\n        </Field>\r\n        <Field horizontal>\r\n          <Field.Label>\r\n            <Label>\r\n              Tickets Target\r\n            </Label>\r\n          </Field.Label>\r\n          <Field.Body>\r\n            <Field>\r\n              <Control>\r\n                <Input\r\n                  placeholder=\"Tickets Target\"\r\n                  type=\"number\"\r\n                  onChange={e => setTicketsTarget(parseInt(e.target.value) || 0)}\r\n                  onFocus={e => e.target.select()}\r\n                  value={ticketsTarget || ''}\r\n                />\r\n              </Control>\r\n            </Field>\r\n          </Field.Body>\r\n        </Field>\r\n        <Field horizontal>\r\n          <Field.Label>\r\n            <Label>\r\n              Tickets on day {days.length + 1}\r\n            </Label>\r\n          </Field.Label>\r\n          <Field.Body>\r\n            <Field>\r\n              <Control>\r\n                <Input\r\n                  placeholder=\"Number of Tickets\"\r\n                  type=\"number\"\r\n                  onChange={e => setTicketsPerDay(parseInt(e.target.value) || 0)}\r\n                  onFocus={e => e.target.select()}\r\n                  value={ticketsPerDay || ''}\r\n                  domRef={ticketsPerDayInput}\r\n                />\r\n              </Control>\r\n            </Field>\r\n            <Button onClick={addTicketsPerDay}>\r\n              <Icon>\r\n                <FaPlus />\r\n              </Icon>\r\n            </Button>\r\n          </Field.Body>\r\n        </Field>\r\n        <Field horizontal>\r\n          <Field.Label>\r\n            <Label>\r\n              Starting Date\r\n            </Label>\r\n          </Field.Label>\r\n          <Field.Body>\r\n            <Field>\r\n              <Control>\r\n                <Input\r\n                  placeholder=\"Tickets Target\"\r\n                  type=\"date\"\r\n                  onChange={e => setStartingDate(e.target.value)}\r\n                  value={startingDate}\r\n                />\r\n              </Control>\r\n            </Field>\r\n          </Field.Body>\r\n        </Field>\r\n        <Field horizontal>\r\n          <Field.Label>\r\n            <Label></Label>\r\n          </Field.Label>\r\n          <Field.Body>\r\n            <Field>\r\n              <Control>\r\n                <Button\r\n                  className=\"is-pulled-right\"\r\n                  disabled={(forecast.percentileStatus === \"loading\") || (forecast.confidenceIntervalsStatus === \"loading\")}\r\n                  onClick={handleCompute}>Compute</Button>\r\n              </Control>\r\n            </Field>\r\n          </Field.Body>\r\n        </Field>\r\n      </Columns.Column>\r\n      <Columns.Column size={6}>\r\n        <Heading subtitle>Throughputs</Heading>\r\n        {days.map(ticketsPerDayList)}\r\n      </Columns.Column>\r\n    </Columns>\r\n  );\r\n}","import React from 'react';\r\nimport { Box, Columns, Heading } from 'react-bulma-components';\r\nimport Chart from 'react-google-charts';\r\nimport { useAppSelector } from '../../hooks';\r\nimport { selectForecast } from '../../redux/reducers/forecast/forecastSlice';\r\n\r\nfunction LoadingContainer() {\r\n  return (\r\n    <Box className=\"is-flex is-justify-content-center\">\r\n      <div className=\"loader\" />\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport function MonteCarloOutput() {\r\n  const forecast = useAppSelector(selectForecast);\r\n\r\n  if (forecast.confidenceIntervalsStatus === 'init') {\r\n    return (\r\n      <Box className=\"is-flex is-justify-content-center\">\r\n        Data will be shown here...\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Columns>\r\n      <Columns.Column size={6}>\r\n        {forecast.confidenceIntervalsStatus === \"loading\" ? <LoadingContainer /> :\r\n          <Box>\r\n            <Heading subtitle>Confidence Intervals</Heading>\r\n            <Chart\r\n              width={'100%'}\r\n              height={'400px'}\r\n              chartType=\"Bar\"\r\n              loader={<div>Loading Chart</div>}\r\n              data={[\r\n                [\r\n                  'Date',\r\n                  'Value',\r\n                ],\r\n                ...forecast.confidenceIntervals.map((data) => [\r\n                  new Date(parseInt(data[0])).toDateString(),\r\n                  data[1]\r\n                ])\r\n              ]}\r\n              options={{\r\n                title: 'Density of Precious Metals, in g/cm^3',\r\n                height: 400,\r\n                bar: { groupWidth: '60%' },\r\n                legend: { position: 'none' },\r\n              }}\r\n              // For tests\r\n              rootProps={{ 'data-testid': '6' }}\r\n            />\r\n          </Box>\r\n        }\r\n      </Columns.Column>\r\n      <Columns.Column size={6}>\r\n        {(forecast.percentileStatus === \"loading\") || (forecast.confidenceIntervalsStatus === \"loading\") ? <LoadingContainer /> :\r\n          <Box>\r\n            <Heading subtitle>Percentile</Heading>\r\n            {forecast.percentile.map((data) => {\r\n              return (\r\n                <Columns key={data.timestamp}>\r\n                  <Columns.Column size={3}>P{data.percentile}%</Columns.Column>\r\n                  <Columns.Column size={9}>{new Date(parseInt(data.timestamp)).toDateString()} ({data.sum} / {data.totalRuns})</Columns.Column>\r\n                </Columns>\r\n              );\r\n            })}\r\n          </Box>\r\n        }\r\n      </Columns.Column>\r\n    </Columns>\r\n\r\n  );\r\n}","import React from 'react';\nimport { Container, Heading } from 'react-bulma-components';\nimport { MonteCarloSettings } from './components/monte-carlo-settings/MonteCarloSettings';\nimport { MonteCarloOutput } from './components/monte-carlo-output/MonteCarloOutput';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Container className=\"App\">\n      <Heading className=\"has-text-centered\">Monte Carlo Simulation</Heading>\n      <MonteCarloOutput />\n      <MonteCarloSettings />\n    </Container>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport forecastReducer from './reducers/forecast/forecastSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    forecast: forecastReducer\r\n  },\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../node_modules/bulma/css/bulma.min.css';\nimport './index.css';\nimport App from './App';\nimport { store } from './redux';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}